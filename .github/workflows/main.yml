name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on pull request events but only for the "main" branch
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

defaults:
  run:
    working-directory: "dummy-nodejs"

env:
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  ECR_REPO_NAME: 'a9i2u6l7/dummy-nodejs'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test:
    name: test
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - run: npm ci
      - run: npm run build --if-present
      - run: npm test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    outputs:
      image_tag: ${{ steps.build-publish.outputs.image_tag }}
      full_image: ${{ steps.build-publish.outputs.full_image }}
      registry: ${{ steps.login-ecr.outputs.registry }}

    steps:
      - uses: actions/checkout@v4

      - name: Build an image from Dockerfile
        run: |
          docker build -t dummy-nodejs:${{ github.sha }} .
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: 'dummy-nodejs:${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/github-actions
          aws-region: us-east-1 # ECR Public can only be logged into from the us-east-1 region

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: ${{ env.AWS_ACCOUNT_ID }}
          mask-password: "true" # see: https://github.com/aws-actions/amazon-ecr-login#docker-credentials
          registry-type: public

      - name: Build, tag, and push image to Amazon ECR
        id: build-publish
        shell: bash
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPO_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker tag "dummy-nodejs:${{ github.sha }}" "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" 
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "IMAGE $IMAGE_TAG is pushed to $ECR_REGISTRY/$ECR_REPOSITORY"
          echo "image_tag=$IMAGE_TAG" >> "$GITHUB_OUTPUT"
          echo "full_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> "$GITHUB_OUTPUT"

  update-manifest:
    name: "Update Manifests"
    needs: "build-and-push"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Git checkout"
        uses: "actions/checkout@v4"
        with:
          token: ${{ secrets.GH_PAT_PUSH_TOKEN }}

      - name: "Update Deployment Image Tag" 
        working-directory: "gitops/apps/workloads/dummy-nodejs"
        env:
          CR_IAMGE: ${{ needs.build-and-push.outputs.registry }}/${{ env.ECR_REPO_NAME }}
          NEW_FULL_IMAGE: ${{ needs.build-and-push.outputs.full_image }}
        run: |
          kustomize edit set image ${CR_IAMGE}=${NEW_FULL_IMAGE}

      - name: "Push Updated Image Tag"
        env:
          NEW_IMAGE_TAG: ${{ needs.build-and-push.outputs.image_tag }}
        run: |
          git config --global user.name "karnzx"
          git config --global user.email "karnzx.noreply.github.com"
          git commit -am "[skip ci] feat: Update deployment image tag to ${NEW_IMAGE_TAG}"
          git pull --rebase origin main
          git push origin HEAD:main